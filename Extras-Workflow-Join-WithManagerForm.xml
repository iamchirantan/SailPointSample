<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow  explicitTransitions="true"  libraries="Identity" name="Joiner-Birthright" type="IdentityLifecycle">
  <Variable input="true" name="trigger">
    <Description>The IdentityTrigger</Description>
  </Variable>
  <Variable input="true" name="event">
    <Description>The IdentityChangeEvent</Description>
  </Variable>
  <Variable input="true" name="identityName">
    <Description>The name of the identity.</Description>
  </Variable>
  <Variable initializer="script:(identityDisplayName != void) ? identityDisplayName : resolveDisplayName(identityName)" input="true" name="identityDisplayName">
    <Description>
      The displayName of the identity being updated.
      Query for this using a projection query and fall back to the name.
    </Description>
  </Variable>
  <Variable initializer="AccountsRequest" input="true" name="flow">
    <Description>What type of LCM flow is this</Description>
  </Variable>
  <Variable name="plan">
    <Description>The provisioning plan which is built during the workflow. </Description>
  </Variable>
  <Variable editable="true" initializer="false" name="optimisticProvisioning">
    <Description>
      Set to true to enable optimistic provisioning.  This will cause
      changes to the entitlements compiled from role assignments to be 
      applied immediately to the identity cube rather than waiting
      for the next refresh/reaggregation after the provisioning system
      completes the request.
    </Description>
  </Variable>
  <Variable editable="true" initializer="true" name="foregroundProvisioning">
    <Description>
      Normally provisioning is done in a step that uses the "background"
      option to force the workflow to be suspend and be resumed in a
      background task thread.  This prevents the browser session from
      hanging since provision can sometimes take a long time.  For demos
      and testing it can be better to do this in the foreground so that
      provisioning will have been performed when control is returned to the
      user.  This prevents having to run the Perform Maintenance task to 
      see the resutls of the request.
    </Description>
  </Variable>
  <Variable initializer="spadmin" input="true" name="fallbackApprover">
    <Description>
      A String that specifies the name of the Identity that will 
      be assigned any approvals where the owner of the approver 
      can't be resolved. Example if the scheme is "owner" and the 
      application doesn't specify and owner.
    </Description>
  </Variable>
  <Variable initializer="LCM" input="true" name="source">
    <Description>
      String version of sailpoint.object.Source to indicate
      where the request originated.  Defaults to LCM.
    </Description>
  </Variable>
  <Variable initializer="true" input="true" name="trace">
    <Description>
      Used for debugging this workflow and when set to true trace
      will be sent to stdout.
    </Description>
  </Variable>
  <Variable name="project">
    <Description>
      ProvisioningProject which is just a compiled version of the ProvisioningPlan.
    </Description>
  </Variable>
 


  <Variable name="identityRequestId" output="true">
    <Description>
       The sequence id of the Identity request object which is stored in 
       the name field of the identity request.
    </Description>
  </Variable>
<Variable name="ldapaccess"/>
<Variable name="prismaccess"/>

  <Variable name="cart" output="true">
    <Description>
       This variable includes all ApprovalItems that are part of 
       the request process and is updated during the AfterScript
       of the approval process by assimilating the decisions 
       and comments from the Approvals copy of the ApprovalItem.
    </Description>
  </Variable>
  <Variable name="identityObject">
    <Description>The Identity object being worked on</Description>
    <Script>
      	<Source>
				
					
	System.out.println("Initializing Workflow variables for IdentityObject");
	Identity identityObject = context.getObjectByName(Identity.class, identityName);
	//identityObject.getControlledScopes();
	return identityObject;
				
	</Source>
    </Script>
  </Variable>
 <Variable name="status">
    <Description>
      Employee or Contractor or "".
    </Description>
  <Script>
      <Source>
	return identityObject.getAttribute("status"); 
	</Source>
    </Script>
  </Variable>

 <Variable name="manager">
    <Description>
      Manager id or 'spadmin' if no manager found. 
    </Description>
  <Script>
      <Source>
	Identity managerIdentity = identityObject.getManager(); 
	if (null != managerIdentity) { 
		return managerIdentity.getName();
	} else {
		return "spadmin";
	}

	</Source>
    </Script>
  </Variable>


  <Description>Enable birthright accounts when an employee joins the company.</Description>
  <RuleLibraries>
    <Reference class="sailpoint.object.Rule"  name="LCM Workflow Library"/>
  </RuleLibraries>


  <Step icon="Start" name="Start">
    <Transition to="Fork"/>
  </Step>
  <Step icon="Message" name="Fork">
    <Transition when="status.equals(&quot;Employee&quot;)" to="ManagerForm"/>
   <Transition to="end"/>
  </Step>



<Step icon="Message" name="ManagerForm" >

<Approval owner='ref:manager' send='identityName' return='ldapaccess,prismaccess'>
<Arg name='workItemDescription'
value='Process new user: $(identityName)'/>
  <Arg name="workItemRequester" value="Aaron.Nichols"/>
  <Arg name="workItemNotificationTemplate" value="TestEmail"/>
  <Arg name="workItemType" value="ManualAction"/>


<Form name='Manager-Joiner-Workflow-Form' >

<Attributes>
<Map>
<entry key="pageTitle" value='Process User'/>
</Map>
</Attributes>

<Section name='userInstructions' type='text' label='Instructions'>
<Field value='A new employee is joining the company. Please select if this user needs access to LDAP and/or PRISM.'/>
</Section>

<Section type="datatable" label='UserName'>
<Field displayName="Employee Name" name="identityName"/>
</Section>

<Section label='Applications'>
<Field name='ldapaccess' displayName='LDAP Access Required' type='boolean' value='false'>
</Field>
<Field name='prismaccess' displayName='PRISM Access Required' type='boolean' value='false'>
</Field>
</Section>

<Button label='Submit' action='next'/>
<Button label='Cancel' action='cancel'/>
</Form>
</Approval>
<Transition to="Sleep"/>
</Step>

 <Step icon="Message" name="Sleep" wait="1">
    <Transition to="Create Birthright Plan"/>
  </Step>

  <Step icon="Message" name="Create Birthright Plan" resultVariable="plan">
    <Description>Process the user that joined and create plan for the user. Only create LDAP account for new "employees". </Description>
    <Script>
      <Source>

		import sailpoint.object.ProvisioningPlan;
		import sailpoint.object.ProvisioningPlan.AccountRequest;
		import sailpoint.object.ProvisioningPlan.AttributeRequest;
		import java.util.List;
		import java.util.ArrayList;
	

		ProvisioningPlan plan = new ProvisioningPlan();
		List accreqs = new ArrayList();
				
		if (ldapaccess) {
			//create LDAP account 
			AccountRequest acctReq = new AccountRequest();
			acctReq.setOperation(AccountRequest.Operation.Create);
			acctReq.setApplication("LDAP");
			accreqs.add(acctReq);
		}
		if (prismaccess) { 				
			// create PRISM account
			AccountRequest acctReq2 = new AccountRequest();
			acctReq2.setOperation(AccountRequest.Operation.Create);
			acctReq2.setApplication("PRISM");
			accreqs.add(acctReq2);
		}

		plan.setAccountRequests(accreqs);
		plan.setIdentity(identityObject);
		//plan.addRequester(requester);
		
		return plan; 

      </Source>
    </Script>
    <Transition to="Initialize"/>
  </Step>
  <Step icon="Task" name="Initialize">
    <Arg name="formTemplate" value="Identity Update"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="plan" value="ref:plan"/>
    <Arg name="priority" value="ref:workItemPriority"/>
    <Arg name="policyScheme" value="none"/>
    <Arg name="source" value="ref:source"/>
    <Arg name="trace" value="ref:trace"/>
    <Arg name="flow" value="ref:flow"/>
    <Description>
      Call the standard subprocess to initialize the request, this includes
      auditing, building the approvalset, compiling the plan into 
       project and checking policy violations.
    </Description>
    <Return name="project" to="project"/>
    <Return name="approvalSet" to="cart"/>
    <Return name="identityRequestId" to="identityRequestId"/>
    <Return name="policyViolations" to="policyViolations"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Initialize"/>
    </WorkflowRef>
    <Transition to="DebugProject"/>
  </Step>
  <Step icon="Message" name="DebugProject">
    <Description>Debug project....</Description>
    <Script>
      <Source>
	import sailpoint.object.ProvisioningProject;
	System.out.println("Project = " + project.toXml());			
				
      </Source>
    </Script>
    <Transition to="Provision"/>
  </Step>
  <Step icon="Task" name="Provision">
    <Arg name="fallbackApprover" value="ref:fallbackApprover"/>
    <Arg name="foregroundProvisioning" value="ref:foregroundProvisioning"/>
    <Arg name="formTemplate" value="Identity Update"/>
    <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
    <Arg name="identityName" value="ref:identityName"/>
    <Arg name="launcher" value="ref:launcher"/>
    <Arg name="manualActionsEmailTemplate" value="Pending Manual Change"/>
    <Arg name="optimisticProvisioning" value="ref:optimisticProvisioning"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="policyScheme" value="none"/>
    <Arg name="trace" value="ref:trace"/>
    <Description>
      Call the standard subprocess that will process the 
      approval decisisions and do provisioning.  This 
      includes calling any configured provisioning 
      connectors and building manual actions.
    </Description>
    <Return name="project" to="project"/>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Provision"/>
    </WorkflowRef>
    <Transition to="Finalize"/>
  </Step>
  <Step catches="complete" icon="Task" name="Finalize">
    <Arg name="approvalSet" value="ref:cart"/>
    <Arg name="project" value="ref:project"/>
    <Arg name="trace" value="ref:trace"/>
    <Description>
      Call the standard subprocess that can audit/finalize the request.
    </Description>
    <WorkflowRef>
      <Reference class="sailpoint.object.Workflow" name="Identity Request Finalize"/>
    </WorkflowRef>
    <Transition to="end"/>
  </Step>
  <Step icon="Stop" name="end"/>
</Workflow>
